This post includes the solution to this problem and one more XOR based trick that you might find useful in future. 
First things first, XOR can be a useful bitwise operation given the range of properties it offers. This question exploits 2 such properties, i.e, XOR of any 2 similar numbers will give us a 0 value and XOR of any number with 0 gives us the same number. 

a^a =0;
0^a=a;

So, the very first thing that comes into our minds if we know these properties is we can simply XOR all elements in the array and store the value as we loop through, in an integer ans. 
As we find a copy of any value, our ans variable will be initialized back to 0 (a^a=0) and at last the only unique element will be left with us which we can return. 

Code: 
```
int singleNumber(vector<int>& nums) {
        int ans=0; 
        for(int x: nums){
            ans^=x;
        }
        return ans;
    }
```

Now for another XOR property that might come in handy:

- In-place swapping of 2 numbers:  We can swap 2 numbers in place by just 3 lines of a XOR code, that goes:

```
void swapInplace(int x, int y){
	x ^= y
	y ^= x
	x ^= y
}
```

The logical explaination of the code aforementioned is something like:
```
x ^= y # =>                      (x ^ y, y)
y ^= x # => (x ^ y, y ^ x ^ y) = (x ^ y, x)
x ^= y # => (x ^ y ^ x, x)     = (y, x)
```

Although all this can be done the conventional ways too, I think it is good to know how to solve a particular problem a few different ways. Hope it helps. 
	
